import { QuartzTransformerPlugin } from "../types";

// import rehypePrettyCode, { Options as CodeOptions } from "rehype-pretty-code"

export interface Options {
  priority: ("frontmatter" | "git" | "filesystem")[];
}
const defaultOptions: Options = {
  priority: ["frontmatter", "git", "filesystem"],
};

import fs from "fs";
import path from "path";

export const Excalidraw: QuartzTransformerPlugin<Partial<Options> | undefined> = (userOpts) => {
  const opts = { ...defaultOptions, ...userOpts }
  return {
    name: "Excalidraw",
    htmlPlugins() {
      return [
        () => {
          // Start Plugin Code
          let repo: Repository | undefined = undefined;
            return (tree, file) => { 
              visit(tree, "element", (node, _index, _parent) => {
                // rewrite all links
                if (
                  node.tagName === "a" &&
                  node.properties &&
                  typeof node.properties.href === "string"
                ) {
                  let dest = node.properties.href as RelativeURL
                  node.properties.className ??= []
                  node.properties.className.push(isAbsoluteUrl(dest) ? "external" : "internal")
  
                  // don't process external links or intra-document anchors
                  const isInternal = !(isAbsoluteUrl(dest) || dest.startsWith("#"))
                  if (isInternal) {
                    dest = node.properties.href = transformLink(
                      file.data.slug!,
                      dest,
                      transformOptions,
                    )
  
                    // url.resolve is considered legacy
                    // WHATWG equivalent https://nodejs.dev/en/api/v18/url/#urlresolvefrom-to
                    const url = new URL(dest, `https://base.com/${curSlug}`)
                    const canonicalDest = url.pathname
                    const [destCanonical, _destAnchor] = splitAnchor(canonicalDest)
  
                    // need to decodeURIComponent here as WHATWG URL percent-encodes everything
                    const simple = decodeURIComponent(
                      simplifySlug(destCanonical as FullSlug),
                    ) as SimpleSlug
                    outgoing.add(simple)
                    node.properties["data-slug"] = simple
                  }
  
                  // rewrite link internals if prettylinks is on
                  if (
                    opts.prettyLinks &&
                    isInternal &&
                    node.children.length === 1 &&
                    node.children[0].type === "text" &&
                    !node.children[0].value.startsWith("#")
                  ) {
                    node.children[0].value = path.basename(node.children[0].value)
                  }
                }
  
                // transform all other resources that may use links
                if (
                  ["img", "video", "audio", "iframe"].includes(node.tagName) &&
                  node.properties &&
                  typeof node.properties.src === "string"
                ) {
                  if (!isAbsoluteUrl(node.properties.src)) {
                    let dest = node.properties.src as RelativeURL
                    dest = node.properties.src = transformLink(
                      file.data.slug!,
                      dest,
                      transformOptions,
                    )
                    node.properties.src = dest
                  }
                }
              })
  
              file.data.links = [...outgoing]
            }

            // console.log(file);
            file.value = "TESTING_PLUGIN;\n" + file.value;

            // file.data.dates = {
            //     created: coerceDate(fp, created),
            //     modified: coerceDate(fp, modified),
            //     published: coerceDate(fp, published),
            // }

            file.data.description = "test";
            file.data.text = "test23";
          };
        },
      ];
    },
  };
};
